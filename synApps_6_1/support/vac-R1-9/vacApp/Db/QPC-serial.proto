OutTerminator = CR;
InTerminator = CR;
ReadTimeout = 2000;
ReplyTimeout = 2000;

# Command 0A Read Current
getCurrent {
	out "~ 05 0A \$1 00";
	in "%*9c%E";
	ExtraInput = Ignore;
}

# Command 0B Read Pressure
getPressure {
	out "~ 05 0B \$1 00";
	in "%*9c%E";
	ExtraInput = Ignore;
}

# Command 0C Read Voltage
getVoltage {
	out "~ 05 0C \$1 00";
	in "%*9c%f";
	ExtraInput = Ignore;
}

# Command 0D Get Supply Status
# New command has the format cmd 0D supply,option
# If you send cmd 0D \$1,00 (Currently 00 is the only option)
# The return format will be XX where XX is one of:
# 00 - pump standby
# 01 - pump starting
# 02 - pump running
# 03 - pump cooldown
# 04 - pump error
# Otherwise this protocol sends back a string as is done here
getStatus {
	out "~ 05 0D \$1 00";
	in "%*9c%s";
	ExtraInput = Ignore;
}

# Command 61 Is High Voltage On - Indicates if the high voltage is on for 
# the specified pump
# This is likely a legacy command as it does not exist in the revision G
# manual. I think that it is replaced by the 0D command above.
isEnabled {
	out "~ 05 61 \$1 00";
	in "%*9c%s";
	ExtraInput = Ignore;
}

# Command 37 Start Pump - Enables high voltage of specified supply
enable {
	out "~ 05 37 \$1 00";
	ExtraInput = Ignore;
}

# Command 38 Stop Pump - Disables high voltage of specified supply
disable {
	out "~ 05 38 \$1 00";
	ExtraInput = Ignore;
}

# Command 01 Get Model - Returns the pump controller model (QPC,MPC,etc)
getModel {
	out "~ 05 01 00";
	in "%*17c%s";
	ExtraInput = Ignore;
}

# Command 02 Version - Returns the firmware version of the pump controller
getFirmware {
	out "~ 05 02 00";
	in "%*27c%s";
	ExtraInput = Ignore;
}

# This function is used to initialize setPressUnit function below
getPressureUnit {
	out "~ 05 0B \$1 00";
	in "%*9c%*f%*1c%s";
	ExtraInput = Ignore;
}

# Uses the command 0B above but returns only the pressure units selected
# Command 0E Set Pressure Units - Allows remote control over pressure units
setPressUnit {
	out "~ 05 0E %s\$1 00";
	in "%*11c";
	
	@init { getPressureUnit; }	
	ExtraInput = Ignore;
}

# Command 11 Get pump Size - Reads pump size in liters/second
getPumpSize {
	out "~ 05 11 \$1 00";
	in "%*9c%d L/S";
	ExtraInput = Ignore;
}
	
# Command 12 Set pump Size - Sets pump size in liters/second
setPumpSize {
	out "~ 05 12 \$1,%s 00";
	in "%*9c";

	@init { getPumpSize; }	
	ExtraInput = Ignore;
}

# For the set points here we just get the set point on/off pressure and output
# relay/digital out status
# NOTE:
# We will use the new 3B command which has replaced the 3C and 3D commands
# get the on pressure set point
# Response from 3B command
# 05 OK 00 1,1,1,3.0E-08,3.6E-08,1 5B
# Response format:
# ADDR STATUS ERR DATA CHECKSUM
# DATA is:
# Spt#,Func,Supply#,On Pressure, Off Pressure
# Func can be one of: 0-Off, 1-On, 2-HV Error, 3-HV On/Off Indicator
getOnPressSpt {
	out "~ 05 3B \$1 00";
	in "%*15c%E";
	ExtraInput = Ignore;	
}

# get off pressure set point
getOffPressSpt {
	out "~ 05 3B \$1 00";
	in "%*15c%*E%*1c%E";
	ExtraInput = Ignore;	
}
getSptStatus {
	out "~ 05 3B \$1 00";
	in "%*29c%d";
	ExtraInput = Ignore;	
}

# The mismatch is because I got lazy with the database and did not filter
# bad on pressures being sent to the device mostly because the device
# firmware will automatically set the off pressure 20% > than the on pressure.
setOnPress {
	out "~ 05 3B \$2,1,\$1,%E,%(\$3\$4:Spt\$2OffPress.VAL)E 00";
	in "%*17c%(\$3\$4:SptMessage.VAL)39c";
	
	@mismatch { in "ER 08 *ERROR: %(\$3\$4:SptMessage.VAL)36c";}
}
setOffPress {
	out "~ 05 3B \$2,1,\$1,%(\$3\$4:Spt\$2OnPress.VAL)E,%E 00";
	in "%*11c";
	ExtraInput = Ignore;	
}

# Pump (supply) name is 15 characters max.
getPumpName {
	out "~ 05 ED \$1 00";
	in "%*9c%15c";
	ExtraInput = Ignore;	
}


