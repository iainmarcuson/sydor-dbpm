# This database is good for a single pump supply on a QPC
# Unless the setpoints are loaded sperately we can have only 1 per pump supply
# Use this database for either serial or Ethernet
##################################################
# P - PV prefix or system name
# SPT - Set point number for this pump
# SPLY - Which pump supply number
record(ai, "$(P)$(PMP):Current"){
	field(DESC, "Reads Channel Current")
	field(SCAN, "5 second")
	field(PINI, "YES")
	field(DTYP, "stream")
	field(INP, "@$(PROTO).proto getCurrent($(SPLY)) $(PORT)")
	field(PREC, "1")
}

record(ai, "$(P)$(PMP):Pressure"){
	field(DESC, "Reads Channel Current")
	field(SCAN, "5 second")
	field(PINI, "YES")
	field(DTYP, "stream")
	field(INP, "@$(PROTO).proto getPressure($(SPLY)) $(PORT)")
	field(PREC, "1")
}

record(ai, "$(P)$(PMP):Voltage"){
	field(DESC, "Reads Channel Current")
	field(SCAN, "5 second")
	field(PINI, "YES")
	field(DTYP, "stream")
	field(INP, "@$(PROTO).proto getVoltage($(SPLY)) $(PORT)")
}

record(stringin, "$(P)$(PMP):Status"){
	field(DESC, "Reads Channel Current")
	field(SCAN, "5 second")
	field(PINI, "NO")
	field(DTYP, "stream")
	field(INP, "@$(PROTO).proto getStatus($(SPLY)) $(PORT)")
}

record(stringin, "$(P)$(PMP):isEnabled"){
	field(DESC, "Reads channel HV status.")
	field(SCAN, "5 second")
	field(PINI, "YES")
	field(DTYP, "stream")
	field(INP, "@$(PROTO).proto isEnabled($(SPLY)) $(PORT)")
}

record(bo, "$(P)$(PMP):enable"){
	field(DESC, "Enable ion pump HV")
	field(PINI, "NO")
	field(VAL, "1") # Dummy Value
	field(DTYP, "stream")
	field(OUT, "@$(PROTO).proto enable($(SPLY)) $(PORT)")
}

record(bo, "$(P)$(PMP):disable"){
	field(DESC, "Disable ion pump HV")
	field(PINI, "NO")
	field(VAL, "1") # Dummy Value
	field(DTYP, "stream")
	field(OUT, "@$(PROTO).proto disable($(SPLY)) $(PORT)")
}

record(stringin, "$(P)$(PMP):Model"){
	field(DESC, "Reads Device Model")
	field(PINI, "YES")
	field(DTYP, "stream")
	field(INP, "@$(PROTO).proto getModel() $(PORT)")
}

record(stringin, "$(P)$(PMP):FirmwareVers"){
	field(DESC, "Reads Device Firmware")
	field(PINI, "YES")
	field(DTYP, "stream")
	field(INP, "@$(PROTO).proto getFirmware() $(PORT)")
}

record(mbbo,$(P)$(PMP):setPressUnits) {
	field(DESC,"Set Pressure Units for pump $(PMP)")
	field(NOBT,"2")
 	field(DTYP, "stream")
	field(OUT,"@$(PROTO).proto setPressUnit($(SPLY)) $(PORT)")
	field(ZRVL,"0")
	field(ONVL,"1")
	field(TWVL,"2")
	field(ZRST,"TORR")
	field(ONST,"MBAR")
	field(TWST,"PASCAL")
}
record(mbbi,"$(P)$(PMP):getPressUnits") {
        field(DESC, "Pressure Units Readback")
#        field(INP, "$(P)$(PMP):setPressUnits.VAL CP NMS")
        field(INP, "@$(PROTO).proto getPressureUnit($(SPLY)) $(PORT)")
	field(SCAN,"10 second")
	field(ZRST,"TORR")
	field(ONST,"MBAR")
	field(TWST,"PASCAL")
}
###################################################################
# Pump size
record(ai, "$(P)$(PMP):PumpSize"){
	field(DESC, "Reads Pump Size for pump $(PMP)")
	field(PINI, "YES")
	field(DTYP, "stream")
	field(INP, "@$(PROTO).proto getPumpSize($(SPLY)) $(PORT)")
	field(EGU,"L/S")
}
record(ao, "$(P)$(PMP):setPumpSize") {
	field(DESC, "Sets Pump Size (L/S) for Pump $(PMP)")
	field(DTYP, "stream")
	field(OUT, "@$(PROTO).proto setPumpSize($(SPLY)) $(PORT)")
	field(OMSL, "supervisory")
	field(EGU,"L/S")
	field(DRVH,"1200")
	field(DRVL,"30")
}
###################################################################
# Pump set point readbacks for on/off pressures and relay/digital out status
# These records are really only good for 1 set point but the database is good
# for 1 of the controllers pump supplies.
record(ai, "$(P)$(PMP):Spt$(SPT)OnPress"){
	field(DESC, "Reads Pump on press for pump $(PMP)")
	field(PINI, "YES")
	field(SCAN, "5 second")
	field(DTYP, "stream")
	field(INP, "@$(PROTO).proto getOnPressSpt($(SPT)) $(PORT)")
        field(PREC,"1")
}
record(ai, "$(P)$(PMP):Spt$(SPT)OffPress"){
	field(DESC, "Reads Pump off press for pump $(PMP)")
	field(PINI, "YES")
	field(SCAN, "5 second")
	field(DTYP, "stream")
	field(INP, "@$(PROTO).proto getOffPressSpt($(SPT)) $(PORT)")
        field(PREC,"1")
}
record(bi, "$(P)$(PMP):Spt$(SPT)Status") {
	field(DESC, "Read Spt$(SPT) status for pump $(PMP)")
	field(PINI, "YES")
	field(SCAN, "5 second")
	field(DTYP, "stream")
	field(INP, "@$(PROTO).proto getSptStatus($(SPT)) $(PORT)")
	field(OSV, "MAJOR")
	field(ZNAM, "Setpoint $(SPT) Off")
	field(ONAM, "Setpoint $(SPT) On")
}
###################################################################
# Pump set point on pressure set
# CAUTION: Setting this to a value greater than the off pressure will
#	   cause the off pressure to be readjusted (by the pump firmware)
#	   so that the off pressure will be 20% greater than the on pressure
#	   The same does not hold true for setting the off pressure but insetad
#	   the controller will simply return an error.
record(ao, "$(P)$(PMP):setSpt$(SPT)OnPressure") {
	field(DESC, "Set on press for Spt$(SPT) Pump $(PMP)")
	field(DTYP, "stream")
	field(OUT, "@$(PROTO).proto setOnPress($(SPLY),$(SPT),$(P),$(PMP)) $(PORT)")
	field(OMSL, "supervisory")
	field(DRVH,"1.0E-4")
	field(DRVL,"1.0e-11")
        field(PREC,"1")
        field(FLNK,"$(P)$(PMP):SptMessage.PROC PP NMS")
}
record(stringin, "$(P)$(PMP):SptMessage"){
	field(DESC, "Display Spt Error Mesg")
	field(INP, " ")
}
############################################################
# Set the off pressure
# This is a bit more tricky than setting on pressure in order to avoid the return 
# error message.
# Must be set between 1.0E-4 and 1.0E-11
# Must be at least 20% > than on pressure
# INPA - Reserved for user input of desired off pressure
############################################################
record(calcout,"$(P)$(PMP):setSpt$(SPT)OffPressure") {
        field(DESC,"Set off press for Spt$(SPT) Pump $(PMP)")
        field(CALC,"(A>=(B+B*0.2))?((A<D)&&(A>C))?A:2:1")
        field(INPB,"$(P)$(PMP):Spt$(SPT)OnPress.VAL NPP NMS")
        field(INPC,"$(P)$(PMP):sendOffPressure.DRVL NPP NMS")
        field(INPD,"$(P)$(PMP):sendOffPressure.DRVH NPP NMS")
        field(INPE,"$(P)$(PMP):Spt$(SPT)OffPress.VAL NPP NMS")
        field(OUT,"$(P)$(PMP):checkOffPressure.PROC PP NMS")
        field(OOPT,"Every Time")
        field(DOPT,"Use CALC")
        field(PREC,"1")
}
# For the record above:
# A means a pressure at least 20% > than on pressure and within range
# 2 means the entered off pressure is not within the valid range
# 1 means the entered off pressure is not 20% > than on pressure
######################################################################
# Check for a value between zero and one and send to device only if true
# otherwise device will report an error. This allows better control over sending
# the message to the QPC to try and not generate an error.
######################################################################
record(calcout,"$(P)$(PMP):checkOffPressure") {
        field(DESC,"Set off press for Spt$(SPT) Pump $(PMP)")
        field(CALC,"(A<1&&A>0)?A:0")
        field(INPA,"$(P)$(PMP):setSpt$(SPT)OffPressure.VAL NPP NMS")
        field(OUT,"$(P)$(PMP):sendOffPressure.VAL PP NMS")
        field(OOPT,"When Non-zero")
        field(DOPT,"Use CALC")
        field(FLNK,"$(P)$(PMP):OffSptMsg.PROC PP NMS")
}
# Sends a valid off pressure command
record(ao, "$(P)$(PMP):sendOffPressure") {
	field(DESC, "send press for Spt$(SPT) Pump $(PMP)")
	field(DTYP, "stream")
	field(OUT, "@$(PROTO).proto setOffPress($(SPLY),$(SPT),$(P),$(PMP)) $(PORT)")
	field(OMSL, "supervisory")
	field(DRVH,"1.0E-4")
	field(DRVL,"1.0e-11")
}
# Create a off set point range message for user display and forward it to
# the actual message generator (OffPressMsg.CC)
record(scalcout,"$(P)$(PMP):OffSptMsg") {
        field(DESC,"Generates messages")
        field(CALC,"A=2?AA+$P('%.1e',E)+BB+$P('%.1e',F):A")
        field(INPA,"$(P)$(PMP):setSpt$(SPT)OffPressure.VAL NPP NMS")
        field(INPB,"$(P)$(PMP):checkOffPressure.VAL NPP NMS")
        field(INPE,"$(P)$(PMP):sendOffPressure.DRVH NPP NMS")
        field(INPF,"$(P)$(PMP):sendOffPressure.DRVL NPP NMS")
        field(AA,"Off Spt must be < ")
        field(BB," & > ")
        field(OUT,"$(P)$(PMP):OffPressMsg.CC PP NMS")
        field(OOPT,"Every Time")
}

# Message to user about sending off set point pressure value
# Probelm is with the CC message, in order to print values of E & F the calc
# gets too long
record(scalcout,"$(P)$(PMP):OffPressMsg") {
        field(DESC,"Generates messages")
        field(CALC,"A=1?BB:A=2?CC:B#0?AA:DD")
        field(INPA,"$(P)$(PMP):setSpt$(SPT)OffPressure.VAL NPP NMS")
        field(INPB,"$(P)$(PMP):checkOffPressure.VAL NPP NMS")
        field(AA,"Off Setpoint Sent")
        field(BB,"Off Spt must be 20% > than On")
        field(DD," ")
        field(OUT,"$(P)$(PMP):OffSptMessage.VAL PP NMS")
        field(OOPT,"Every Time")
}
record(stringin, "$(P)$(PMP):OffSptMessage"){
	field(DESC, "Display Off Spt Mesg")
	field(INP, " ")
}

######################################################################
record(stringin, "$(P)$(PMP):Pump$(SPLY)Name"){
	field(DESC, "Pump Name Supply #$(SPLY)")
	field(SCAN, "5 second")
	field(PINI, "YES")
	field(DTYP, "stream")
	field(INP, "@$(PROTO).proto getPumpName($(SPLY),$(P),$(PMP)) $(PORT)")
}

